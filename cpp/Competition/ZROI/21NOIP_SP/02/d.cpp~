#include <bits/stdc++.h>
using namespace std;

const int N = 1010;

int a[N], b[N], cnt[N][N];

struct DSU {
    int f[N], n, siz[N];

    inline void init(int x) {n = x; while (~x) siz[x] = 1, f[x] = x --;}
    void find(int x) {while (x != f[x]) x = f[x] = f[f[x]]; return x;}
    void merge(int x, int y) {
        x = find(x), y = find(y);
        if (x == y) return;
        if (siz[x] > siz[y]) swap(x, y);
        f[x] = y, siz[y] += siz[x];
        for (int i = 1; i <= tn; ++ i)
          cnt[b][i] += cnt[a][i];
    }
} dsu;

int n, m, k, q, t[N], q[N], qt, vis[N];

#define lb(T, siz_T, x) lower_bound(T + 1, T + siz_T + 1, x)
#define ub(T, siz_T, x) upper_bound(T + 1, T + siz_T + 1, x)

int main() {
    scanf("%d%d%d", &n, &m, &k); dsu.init(n);
    for (int i = 1; i <= n; ++ i) scanf("%d", &a[i]);
    for (int i = 1; i <= n; ++ i) scanf("%d", &b[i]), t[i] = b[i];
    sort(t + 1, t + n + 1); int tn = unique(t + 1, t + n + 1) - t - 1;
    for (int i = 1; i <= n; ++ i) b[i] = lb(t, tn, b[i]) - t;
    for (int i = 1; i <= m; ++ i) {
        int u, v; scanf("%d%d", &u, &v);
        dsu.merge(u, v);
    }
    for (int i = 1; i <= n; ++ i)
      if (f[i] == i) q[++ qt] = i;
    scanf("%d", &q);
    while (q --) {
        int v, p, d[N]; scanf("%d%d", &v, &p);
        for (int i = 1; i <= p; ++ i) {
            int x; scanf("%d", &x); d[x] = 1;
        }
        for (int i = 1; i <= n; ++ i)
          if (a[i] < v) -- cnt[f[i]][b[i]];
        for (int i = 1; i <= n; ++ i)
          if (d[i]) vis[f[i]] = 1;
        int ans = 0;
        for (int i = 1; i <= qt; ++ i) {
            if (vis[q[i]]) continue;
            int res = 0;
            for (int j = 1; j <= tn; ++ j)
              if (cnt[q[i]][j] && cnt[q[i]][j] % k != 0)
                ++ res;
            ans = max(ans, res);
        }
        printf("%d\n", res);
        for (int i = 1; i <= n; ++ i) {
            if (a[i] < v) ++ cnt[f[i]][b[i]];
            vis[i] = 0;
        }
    }
    return 0;
}
